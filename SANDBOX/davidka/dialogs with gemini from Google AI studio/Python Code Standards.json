{
  "runSettings": {
    "temperature": 1.0,
    "model": "models/gemini-2.0-flash",
    "topP": 0.95,
    "topK": 40,
    "maxOutputTokens": 8192,
    "safetySettings": [{
      "category": "HARM_CATEGORY_HARASSMENT",
      "threshold": "OFF"
    }, {
      "category": "HARM_CATEGORY_HATE_SPEECH",
      "threshold": "OFF"
    }, {
      "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
      "threshold": "OFF"
    }, {
      "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
      "threshold": "OFF"
    }, {
      "category": "HARM_CATEGORY_CIVIC_INTEGRITY",
      "threshold": "OFF"
    }],
    "responseMimeType": "text/plain",
    "enableCodeExecution": false,
    "enableEnhancedCivicAnswers": true,
    "enableSearchAsATool": false,
    "enableBrowseAsATool": false,
    "enableAutoFunctionResponse": false
  },
  "systemInstruction": {
    "text": "### **Системные инструкции для обработки кода проекта `hypotez`**\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nОписание функциональности и правил для генерации, анализа и улучшения кода. Направлено на обеспечение последовательного и читаемого стиля кодирования, соответствующего требованиям.\n\n---\n\n### **Основные принципы**\n\n#### **1. Общие указания**:\n- Соблюдай четкий и понятный стиль кодирования.\n- Все изменения должны быть обоснованы и соответствовать установленным требованиям.\n\n#### **2. Комментарии**:\n- Используй `#` для внутренних комментариев.\n- Документация всех функций, методов и классов должна следовать такому формату: \n    ```python\n        def function(param: str, param1: Optional[str | dict | str] \u003d None) -\u003e dict | None:\n            \"\"\"\n            Args:\n                param (str): Описание параметра `param`.\n                param1 (Optional[str | dict | str], optional): Описание параметра `param1`. По умолчанию `None`.\n    \n            Returns:\n                dict | None: Описание возв��ащаемого значения. Возвращает словарь или `None`.\n    \n            Raises:\n                SomeError: Описание ситуации, в которой возникает исключение `SomeError`.\n\n            Ехаmple:\n                \u003e\u003e\u003e function(\u0027param\u0027, \u0027param1\u0027)\n                {\u0027param\u0027: \u0027param1\u0027}\n            \"\"\"\n    ```\n- Комментарии и документация должны быть четкими, лаконичными и точными.\n\n#### **3. Форматирование кода**:\n- Используй одинарные кавычки. `a:str \u003d \u0027value\u0027`, `print(\u0027Hello World!\u0027)`;\n- Добавляй пробелы вокруг операторов. Например, `x \u003d 5`;\n- Все параметры должны быть аннотированы типами. `def function(param: str, param1: Optional[str | dict | str] \u003d None) -\u003e dict | None:`;\n- Не используй `Union`. Вместо этого используй `|`.\n\n#### **4. Логирование**:\n- Для логгирования Всегда Используй модуль `logger` из `src.logger.logger`.\n- Ошибки должны логироваться с использованием `logger.error`.\nПример:\n    ```python\n        try:\n            ...\n        except Exception as ex:\n            logger.error(\u0027Error while processing data\u0027, ех, exc_info\u003dTrue)\n    ```\n\n\n---\n\n### **Основные требования**:\n\n#### **1. Формат ответов в Markdown**:\n- Все ответы должны быть выполнены в формате **Markdown**.\n\n#### **2. Формат комментариев**:\n- Используйте указанный стиль для комментариев и документации в коде.\n- Пример:\n\n```python\n    def read_text_file(\n        file_path: str | Path,\n        as_list: bool \u003d False,\n        extensions: Optional[list[str]] \u003d None,\n        chunk_size: int \u003d 8192\n    ) -\u003e Generator[str, None, None] | str | None:\n        def read_text_file(\n    file_path: str | Path,\n    as_list: bool \u003d False,\n    extensions: Optional[List[str]] \u003d None,\n    chunk_size: int \u003d 8192,\n) -\u003e Generator[str, None, None] | str | None:\n    \"\"\"\n    Считывает содержимое файла (или файлов из каталога) с использованием генератора для экономии памяти.\n\n    Args:\n        file_path (str | Path): Путь к файлу или каталогу.\n        as_list (bool): Если `True`, возвращает генератор строк.\n        extensions (Optional[List[str]]): Список расширений файлов для чтения из каталога.\n        chunk_size (int): Размер чанков для чтения файла в байтах.\n\n    Returns:\n        Generator[str, None, None] | str | None: Генератор строк, объединенная строка или `None` в случае ошибки.\n\n    Raises:\n        Exception: Если возникает ошибка при чтении файла.\n\n    Example:\n        \u003e\u003e\u003e from pathlib import Path\n        \u003e\u003e\u003e file_path \u003d Path(\u0027example.txt\u0027)\n        \u003e\u003e\u003e content \u003d read_text_file(file_path)\n        \u003e\u003e\u003e if content:\n        ...    print(f\u0027File content: {content[:100]}...\u0027)\n        File content: Example text...\n    \"\"\"\n        ...\n```\n- Всегда предоставляйте подробные объяснения в комментариях. Избегайте расплывчатых терминов, таких как *«получить»* или *«делать»*. Вместо этого используйте точные термины, такие как *«извлечь»*, *«проверить»*, *«выполнить»*.\n- Комментарии должны непосредственно предшествовать описываемому блоку кода и объяснять его назначение.\n\n#### **3. Пробелы вокруг операторов присваивания**:\n- Всегда добавляйте пробелы вокруг оператора `\u003d`, чтобы повысить читаемость.\n- Примеры:\n  - **Неправильно**: `x\u003d5`\n  - **Правильно**: `x \u003d 5`\n\n#### **4. Использование `j_loads` или `j_loads_ns`**:\n- Для чтения JSON или конфигурационных файлов замените стандартное использование `open` и `json.load` на `j_loads` или `j_loads_ns`.\n- Пример:\n\n```python\n# Неправильно:\nwith open(\u0027config.json\u0027, \u0027r\u0027, encoding\u003d\u0027utf-8\u0027) as f:\n    data \u003d json.load(f)\n\n# Правильно:\ndata \u003d j_loads(\u0027config.json\u0027)\n```\n\n#### **5. Сохранение комментариев**:\n- Все существующие комментарии, начинающиеся с `#`, должны быть сохранены без изменений в разделе «Улучшенный код».\n- Если комментарий кажется устаревшим или неясным, не изменяйте его. Вместо этого отметьте его в разделе «Изменения».\n\n#### **6. Обработка `...` в коде**:\n- Оставляйте `...` как указатели в коде без изменений.\n- Не документируйте строки с `...`.\n\nОбязательно передай заголовок файлаа как:\n\"\"\"\n```rst\n  ..:module: \u003cКак было указано в коде\u003e (например `src.webdriver` или `src.ai.gemini`)\n```\nЗаголовок модуля\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nОписание работы модуля\nКлассы модуля\n - класс - описание\n\n\"\"\""
  },
  "chunkedPrompt": {
    "chunks": [{
      "text": "Приведи код в соответствие моим стандартам:\n## \\file /src/endpoints/emil/emil_design.py\n# -*- coding: utf-8 -*-\n#! .pyenv/bin/python3\n\n\"\"\"\n.. module:: src.endpoints.emil \n\t:platform: Windows, Unix\n\t:synopsis: Module for managing and processing images and promoting to Facebook and PrestaShop.\n\n\"\"\"\n\nimport os\nimport asyncio\nimport time\nfrom pathlib import Path\nfrom types import SimpleNamespace\nfrom typing import Optional, List\nfrom dataclasses import dataclass, field\n\nimport header\nfrom header import __root__\n\n# External modules\nfrom src import gs\nfrom src.webdriver.driver import Driver\nfrom src.webdriver.chrome import Chrome\nfrom src.ai.gemini import GoogleGenerativeAI\nfrom src.ai.openai.model import OpenAIModel\nfrom src.endpoints.prestashop.product import PrestaProduct\nfrom src.endpoints.prestashop.language import PrestaLanguage\nfrom src.endpoints.prestashop.product_fields import ProductFields\nfrom src.endpoints.advertisement.facebook.scenarios.post_message import (\n    post_message,\n)\nfrom src.utils.file import read_text_file, save_text_file, get_filenames_from_directory\n\nfrom src.utils.jjson import j_loads, j_loads_ns, j_dumps\nfrom src.utils.image import get_image_bytes, get_raw_image_data\nfrom src.logger.logger import logger\n\nfrom src import USE_ENV # \u003c- True - использую переменные окружения, False - использую параметры из keepass\n\nclass Config:\n\n    ENDPOINT: str \u003d \u0027emil\u0027\n    MODE:str \u003d \u0027dev\u0027\n    POST_FORMAT \u003d \u0027XML\u0027\n    API_DOMAIN:str \u003d \u0027\u0027\n    API_KEY:str \u003d \u0027\u0027\n\n    if USE_ENV:\n        from dotenv import load_dotenv\n        load_dotenv()\n        API_DOMAIN \u003d os.getenv(\u0027HOST\u0027)\n        API_KEY \u003d os.getenv(\u0027API_KEY\u0027)\n\n    elif MODE \u003d\u003d \u0027dev\u0027:\n        API_DOMAIN \u003d gs.credentials.presta.client.dev_emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.dev_emil_design.api_key\n\n    elif MODE \u003d\u003d \u0027dev8\u0027:\n        API_DOMAIN \u003d gs.credentials.presta.client.dev8_emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.dev8_emil_design.api_key\n\n    else:\n        API_DOMAIN \u003d gs.credentials.presta.client.emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.emil_design.api_key\n\nclass EmilDesign:\n    \"\"\"Dataclass for designing and promoting images through various platforms.\"\"\"\n\n    gemini: Optional[GoogleGenerativeAI] \u003d None\n    openai: Optional[OpenAIModel] \u003d None\n    base_path: Path \u003d gs.path.endpoints / Config.ENDPOINT\n    config: SimpleNamespace \u003d j_loads_ns(base_path / f\u0027{Config.ENDPOINT}.json\u0027)\n    data_path: Path \u003d getattr(gs.path, config.storage, \u0027external_storage\u0027) / Config.ENDPOINT\n    gemini_api: str \u003d os.getenv(\u0027GEMINI_API\u0027) if USE_ENV else gs.credentials.gemini.emil\n    presta_api: str \u003d os.getenv(\u0027PRESTA_API\u0027) if USE_ENV else gs.credentials.presta.client.emil_design.api_key\n    presta_domain: str \u003d os.getenv(\u0027PRESTA_URL\u0027) if USE_ENV else gs.credentials.presta.client.emil_design.api_domain\n\n    def describe_images(self, \n                              lang: str,\n                              models:dict \u003d {\u0027gemini\u0027: {\u0027model_name\u0027:\u0027gemini-1.5-flash\u0027}, \n                                             \u0027openai\u0027: {\u0027model_name\u0027:\u0027gpt-4o-mini\u0027,\n                                                        \u0027assistant_id\u0027:\u0027asst_uDr5aVY3qRByRwt5qFiMDk43\u0027}}):\n        \"\"\"Describe images based on the provided instruction and examples.\"\"\"\n        \n        system_instruction \u003d Path(self.base_path / \u0027instructions\u0027 / f\u0027system_instruction.{lang}.md\u0027).read_text(encoding\u003d\u0027UTF-8\u0027)\n        prompt \u003d Path(self.base_path / \u0027instructions\u0027 / f\u0027hand_made_furniture.{lang}.md\u0027).read_text(encoding\u003d\u0027UTF-8\u0027)\n        furniture_categories \u003d Path(self.base_path / \u0027categories\u0027 / \u0027main_categories_furniture.json\u0027).read_text(encoding\u003d\u0027UTF-8\u0027).replace(r\u0027\\n\u0027, \u0027\u0027).replace(r\u0027\\t\u0027, \u0027\u0027)\n        system_instruction +\u003d furniture_categories + prompt\n\n        output_json \u003d self.data_path / f\u0027out_{gs.now}_{lang}.json\u0027\n        described_images_path \u003d self.data_path / \u0027described_images.txt\u0027\n        described_images: list \u003d read_text_file(described_images_path, as_list\u003dTrue) or []\n        images_dir \u003d self.data_path / \u0027images\u0027 / \u0027furniture_images\u0027\n        images_files_list: list \u003d get_filenames_from_directory(images_dir)\n        images_to_process \u003d [img for img in images_files_list if str(images_dir / img) not in described_images]\n\n        use_openai: bool \u003d False\n        if use_openai:\n            self.openai \u003d OpenAIModel(system_instruction\u003dsystem_instruction, \n                                      model_name\u003d models[\u0027openai\u0027][\u0027model_name\u0027],\n                                      assistant_id\u003dmodels[\u0027openai\u0027][\u0027assistant_id\u0027])\n\n        use_gemini: bool \u003d True\n        if use_gemini:\n            self.gemini \u003d GoogleGenerativeAI(\n                api_key\u003dself.gemini_api,\n                model_name\u003d models[\u0027gemini\u0027][\u0027model_name\u0027],\n                system_instruction\u003dsystem_instruction,\n                generation_config\u003d{\u0027response_mime_type\u0027: \u0027application/json\u0027}\n            )\n\n        for img in images_to_process:\n            \n            logger.info(f\"Starting process file {img}\\n\")\n            \n            raw_img_data \u003d get_raw_image_data(images_dir / img)\n            response \u003d self.gemini.describe_image(image\u003draw_img_data, mime_type\u003d\u0027image/jpeg\u0027, prompt \u003d prompt)\n            ...\n            if not response:\n                logger.debug(f\"Failed to get description for {img}\")\n                ...\n            else:\n                response_dict: dict \u003d j_loads(response)[0] if isinstance(j_loads(response), list) else j_loads(response)\n                response_dict[\u0027local_image_path\u0027] \u003d str(images_dir / img)\n                j_dumps(response_dict, self.data_path / f\u0027{img}.json\u0027)\n                # Список уже обработанных изображений\n                described_images.append(str(images_dir / img))\n                save_text_file(described_images_path, described_images)\n                \n                \n            time.sleep(15) # Задержка между запросами\n\n    async def promote_to_facebook(self):\n        \"\"\"Promote images and their descriptions to Facebook.\"\"\"\n        d \u003d Driver(Chrome)\n        d.get_url(r\u0027https://www.facebook.com/groups/1080630957030546\u0027)\n        messages \u003d j_loads_ns(self.base_path / \"images_descritions_he.json\")\n        \n        for m in messages:\n            message \u003d SimpleNamespace(title\u003df\"{m.parent}\\n{m.category}\", description\u003dm.description, products\u003dSimpleNamespace(local_image_path\u003d[m.local_image_path]))\n            post_message(d, message, without_captions\u003dTrue)\n\n    def upload_described_products_to_prestashop(self, \n                                                      products_list: Optional[List[SimpleNamespace]] \u003d None, \n                                                      lang: Optional[str] \u003d None,\n                                                      *args, **kwards) -\u003e bool:\n        \"\"\"Upload product information to PrestaShop.\"\"\"\n        json_files_list:list[str] \u003d get_filenames_from_directory(self.data_path, ext\u003d\u0027json\u0027)\n        products_list:list[SimpleNamespace] \u003d [j_loads_ns(self.data_path / f) for f in json_files_list]\n        lang:str \u003d lang or \u0027he\u0027\n        host:str \u003d gs.credentials.presta.client.emil_design.api_domain if USE_ENV else os.getenv(\u0027HOST\u0027)\n        api_key:str \u003d gs.credentials.presta.client.emil_design.api_key if USE_ENV else os.getenv(\u0027API_KEY\u0027)\n\n\n        # DEVELOPMENT ENVIRONMENT !!!\n        \"\"\"Список доменов для разных окружений\n        dev - prestashop 1.7 https://dev.emil-design.com/api\n        dev8 - prestashop 8  https://dev8.emil-design.com/api\n        \"\"\"\n        SUB_DOMAIN: str \u003d \u0027prod\u0027 # prod | dev | dev8\n        host:str\u003d\u0027\u0027\n        api_key:str\u003d\u0027\u0027\n\n        if SUB_DOMAIN \u003d\u003d \u0027dev8\u0027:\n            host \u003d gs.credentials.presta.client.dev8_emil_design.api_domain\n            api_key \u003d gs.credentials.presta.client.dev8_emil_design.api_key\n\n        elif SUB_DOMAIN \u003d\u003d \u0027dev\u0027:\n            host \u003d gs.credentials.presta.client.dev_emil_design.api_domain\n            api_key \u003d gs.credentials.presta.client.dev_emil_design.api_key\n        \n            ... # другие окружения \n\n        elif SUB_DOMAIN \u003d\u003d \u0027prod\u0027:\n            host \u003d gs.credentials.presta.client.emil_design.api_domain\n            api_key \u003d gs.credentials.presta.client.emil_design.api_key\n\n        if not host or not api_key:\n            logger.error(\"PrestaShop credentials not found.\", None, False)\n            ...\n            return False\n\n        p:PrestaProduct \u003d PrestaProduct(api_domain\u003dhost, api_key\u003dapi_key)\n\n        \"\"\"Важно! При загрузке товаров в PrestaShop, необходимо указать язык, на котором будут отображаться названия и характеристики товара.\n        в данном случае, язык по умолчанию - иврит (he), но также можно указать английский (en) или русский (ru)\n        индексы могут меняться в зависимости от настроек магазина. Обычно я выставляю индекс `1` для английского, `2` для иврита и `3` для русского.\n        таблица с индексами для` emil-design.com` находится в файле `locales.json` в папке `shop_locales`\n        \"\"\"\n        lang_ns: SimpleNamespace \u003d j_loads_ns(Path(__root__ , \u0027src\u0027 , \u0027endpoints\u0027 , ENDPOINT , \u0027shop_locales\u0027 , \u0027locales.json\u0027))\n        lang_index \u003d getattr(lang_ns, lang) \n\n        for product_ns in products_list:\n            f:ProductFields \u003d ProductFields( lang_index )\n            f.name\u003dproduct_ns.name\n            f.description \u003d product_ns.description\n            f.price \u003d \u0027100\u0027\n            f.id_category_default\u003dproduct_ns.id_category_default\n            f.additional_category_append(product_ns.id_category_parent)\n            f.id_supplier \u003d 11366\n            f.local_image_path\u003dproduct_ns.local_image_path\n            p.add_new_product(f)\n            \n\nif __name__ \u003d\u003d \"__main__\":\n    emil \u003d EmilDesign()\n    emil.upload_described_products_to_prestashop(lang\u003d\u0027he\u0027)\n    #asyncio.run(emil.upload_described_products_to_prestashop_async(lang\u003d\u0027he\u0027))\n    #emil.describe_images(\u0027he\u0027)\n\n",
      "role": "user",
      "tokenCount": 2815
    }, {
      "text": "```markdown\n### **Изменения**\n\n1.  Обновлены комментарии и добавлены недостающие docstring к функциям и классам.\n2.  Добавлены аннотации типов для всех параметров и возвращаемых значений.\n3.  Использованы `j_loads` и `j_loads_ns` для загрузки JSON-файлов.\n4.  Добавлены пробелы вокруг операторов присваивания.\n5.  Организовано логирование с использованием модуля `logger`.\n\n### **Улучшенный код**\n\n```python\n## \\file /src/endpoints/emil/emil_design.py\n# -*- coding: utf-8 -*-\n#! .pyenv/bin/python3\n\n\"\"\"\n.. module:: src.endpoints.emil\n    :platform: Windows, Unix\n    :synopsis: Module for managing and processing images and promoting to Facebook and PrestaShop.\n\"\"\"\n\nimport os\nimport asyncio\nimport time\nfrom pathlib import Path\nfrom types import SimpleNamespace\nfrom typing import Optional, List\nfrom dataclasses import dataclass, field\n\nimport header\nfrom header import __root__\n\n# External modules\nfrom src import gs\nfrom src.webdriver.driver import Driver\nfrom src.webdriver.chrome import Chrome\nfrom src.ai.gemini import GoogleGenerativeAI\nfrom src.ai.openai.model import OpenAIModel\nfrom src.endpoints.prestashop.product import PrestaProduct\nfrom src.endpoints.prestashop.language import PrestaLanguage\nfrom src.endpoints.prestashop.product_fields import ProductFields\nfrom src.endpoints.advertisement.facebook.scenarios.post_message import (\n    post_message,\n)\nfrom src.utils.file import read_text_file, save_text_file, get_filenames_from_directory\n\nfrom src.utils.jjson import j_loads, j_loads_ns, j_dumps\nfrom src.utils.image import get_image_bytes, get_raw_image_data\nfrom src.logger.logger import logger\n\nfrom src import USE_ENV  # \u003c- True - использую переменные окружения, False - использую параметры из keepass\n\n\nclass Config:\n    \"\"\"Configuration class for EmilDesign.\"\"\"\n\n    ENDPOINT: str \u003d \u0027emil\u0027\n    MODE: str \u003d \u0027dev\u0027\n    POST_FORMAT \u003d \u0027XML\u0027\n    API_DOMAIN: str \u003d \u0027\u0027\n    API_KEY: str \u003d \u0027\u0027\n\n    if USE_ENV:\n        from dotenv import load_dotenv\n\n        load_dotenv()\n        API_DOMAIN \u003d os.getenv(\u0027HOST\u0027)\n        API_KEY \u003d os.getenv(\u0027API_KEY\u0027)\n\n    elif MODE \u003d\u003d \u0027dev\u0027:\n        API_DOMAIN \u003d gs.credentials.presta.client.dev_emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.dev_emil_design.api_key\n\n    elif MODE \u003d\u003d \u0027dev8\u0027:\n        API_DOMAIN \u003d gs.credentials.presta.client.dev8_emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.dev8_emil_design.api_key\n\n    else:\n        API_DOMAIN \u003d gs.credentials.presta.client.emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.emil_design.api_key\n\n\nclass EmilDesign:\n    \"\"\"Dataclass for designing and promoting images through various platforms.\"\"\"\n\n    gemini: Optional[GoogleGenerativeAI] \u003d None\n    openai: Optional[OpenAIModel] \u003d None\n    base_path: Path \u003d gs.path.endpoints / Config.ENDPOINT\n    config: SimpleNamespace \u003d j_loads_ns(base_path / f\u0027{Config.ENDPOINT}.json\u0027)\n    data_path: Path \u003d getattr(gs.path, config.storage, \u0027external_storage\u0027) / Config.ENDPOINT\n    gemini_api: str \u003d os.getenv(\u0027GEMINI_API\u0027) if USE_ENV else gs.credentials.gemini.emil\n    presta_api: str \u003d os.getenv(\u0027PRESTA_API\u0027) if USE_ENV else gs.credentials.presta.client.emil_design.api_key\n    presta_domain: str \u003d os.getenv(\u0027PRESTA_URL\u0027) if USE_ENV else gs.credentials.presta.client.emil_design.api_domain\n\n    def describe_images(\n        self,\n        lang: str,\n        models: dict \u003d {\n            \u0027gemini\u0027: {\u0027model_name\u0027: \u0027gemini-1.5-flash\u0027},\n            \u0027openai\u0027: {\u0027model_name\u0027: \u0027gpt-4o-mini\u0027, \u0027assistant_id\u0027: \u0027asst_uDr5aVY3qRByRwt5qFiMDk43\u0027},\n        },\n    ) -\u003e None:\n        \"\"\"Describe images based on the provided instruction and examples.\n\n        Args:\n            lang (str): Language for the description.\n            models (dict, optional): Models configuration. Defaults to Gemini and OpenAI models.\n\n        Returns:\n            None\n\n        Raises:\n            FileNotFoundError: If instruction files are not found.\n            Exception: If any error occurs during image processing.\n\n        Example:\n            \u003e\u003e\u003e emil \u003d EmilDesign()\n            \u003e\u003e\u003e emil.describe_images(\u0027he\u0027)\n        \"\"\"\n        try:\n            system_instruction \u003d Path(self.base_path / \u0027instructions\u0027 / f\u0027system_instruction.{lang}.md\u0027).read_text(\n                encoding\u003d\u0027UTF-8\u0027\n            )\n            prompt \u003d Path(self.base_path / \u0027instructions\u0027 / f\u0027hand_made_furniture.{lang}.md\u0027).read_text(\n                encoding\u003d\u0027UTF-8\u0027\n            )\n            furniture_categories \u003d (\n                Path(self.base_path / \u0027categories\u0027 / \u0027main_categories_furniture.json\u0027)\n                .read_text(encoding\u003d\u0027UTF-8\u0027)\n                .replace(r\u0027\\n\u0027, \u0027\u0027)\n                .replace(r\u0027\\t\u0027, \u0027\u0027)\n            )\n            system_instruction +\u003d furniture_categories + prompt\n\n            output_json \u003d self.data_path / f\u0027out_{gs.now}_{lang}.json\u0027\n            described_images_path \u003d self.data_path / \u0027described_images.txt\u0027\n            described_images: list \u003d read_text_file(described_images_path, as_list\u003dTrue) or []\n            images_dir \u003d self.data_path / \u0027images\u0027 / \u0027furniture_images\u0027\n            images_files_list: list \u003d get_filenames_from_directory(images_dir)\n            images_to_process \u003d [\n                img for img in images_files_list if str(images_dir / img) not in described_images\n            ]\n\n            use_openai: bool \u003d False\n            if use_openai:\n                self.openai \u003d OpenAIModel(\n                    system_instruction\u003dsystem_instruction,\n                    model_name\u003dmodels[\u0027openai\u0027][\u0027model_name\u0027],\n                    assistant_id\u003dmodels[\u0027openai\u0027][\u0027assistant_id\u0027],\n                )\n\n            use_gemini: bool \u003d True\n            if use_gemini:\n                self.gemini \u003d GoogleGenerativeAI(\n                    api_key\u003dself.gemini_api,\n                    model_name\u003dmodels[\u0027gemini\u0027][\u0027model_name\u0027],\n                    system_instruction\u003dsystem_instruction,\n                    generation_config\u003d{\u0027response_mime_type\u0027: \u0027application/json\u0027},\n                )\n\n            for img in images_to_process:\n                logger.info(f\u0027Starting process file {img}\\n\u0027)\n\n                raw_img_data \u003d get_raw_image_data(images_dir / img)\n                response \u003d self.gemini.describe_image(image\u003draw_img_data, mime_type\u003d\u0027image/jpeg\u0027, prompt\u003dprompt)\n                ...\n                if not response:\n                    logger.debug(f\u0027Failed to get description for {img}\u0027)\n                    ...\n                else:\n                    response_dict: dict \u003d (\n                        j_loads(response)[0] if isinstance(j_loads(response), list) else j_loads(response)\n                    )\n                    response_dict[\u0027local_image_path\u0027] \u003d str(images_dir / img)\n                    j_dumps(response_dict, self.data_path / f\u0027{img}.json\u0027)\n                    # Список уже обработанных изображений\n                    described_images.append(str(images_dir / img))\n                    save_text_file(described_images_path, described_images)\n\n                time.sleep(15)  # Задержка между запросами\n        except FileNotFoundError as e:\n            logger.error(f\u0027Instruction file not found: {e}\u0027, exc_info\u003dTrue)\n        except Exception as e:\n            logger.error(f\u0027Error while processing image: {e}\u0027, exc_info\u003dTrue)\n\n    async def promote_to_facebook(self) -\u003e None:\n        \"\"\"Promote images and their descriptions to Facebook.\n\n        Args:\n            None\n\n        Returns:\n            None\n\n        Raises:\n            Exception: If any error occurs during Facebook promotion.\n        \"\"\"\n        try:\n            d \u003d Driver(Chrome)\n            d.get_url(r\u0027https://www.facebook.com/groups/1080630957030546\u0027)\n            messages \u003d j_loads_ns(self.base_path / \u0027images_descritions_he.json\u0027)\n\n            for m in messages:\n                message \u003d SimpleNamespace(\n                    title\u003df\u0027{m.parent}\\n{m.category}\u0027,\n                    description\u003dm.description,\n                    products\u003dSimpleNamespace(local_image_path\u003d[m.local_image_path]),\n                )\n                post_message(d, message, without_captions\u003dTrue)\n        except Exception as e:\n            logger.error(f\u0027Error while promoting to Facebook: {e}\u0027, exc_info\u003dTrue)\n\n    def upload_described_products_to_prestashop(\n        self, products_list: Optional[List[SimpleNamespace]] \u003d None, lang: Optional[str] \u003d None, *args, **kwards\n    ) -\u003e bool:\n        \"\"\"Upload product information to PrestaShop.\n\n        Args:\n            products_list (Optional[List[SimpleNamespace]], optional): List of product info. Defaults to None.\n            lang (Optional[str], optional): Language code. Defaults to None.\n\n        Returns:\n            bool: True if upload succeeds, False otherwise.\n\n        Raises:\n            FileNotFoundError: If locales file is not found.\n            Exception: If any error occurs during PrestaShop upload.\n        \"\"\"\n        try:\n            json_files_list: list[str] \u003d get_filenames_from_directory(self.data_path, ext\u003d\u0027json\u0027)\n            products_list: list[SimpleNamespace] \u003d [j_loads_ns(self.data_path / f) for f in json_files_list]\n            lang: str \u003d lang or \u0027he\u0027\n            host: str \u003d (\n                gs.credentials.presta.client.emil_design.api_domain if USE_ENV else os.getenv(\u0027HOST\u0027)\n            )\n            api_key: str \u003d (\n                gs.credentials.presta.client.emil_design.api_key if USE_ENV else os.getenv(\u0027API_KEY\u0027)\n            )\n\n            # DEVELOPMENT ENVIRONMENT !!!\n            \"\"\"Список доменов для разных окружений\n            dev - prestashop 1.7 https://dev.emil-design.com/api\n            dev8 - prestashop 8  https://dev8.emil-design.com/api\n            \"\"\"\n            SUB_DOMAIN: str \u003d \u0027prod\u0027  # prod | dev | dev8\n            host: str \u003d \u0027\u0027\n            api_key: str \u003d \u0027\u0027\n\n            if SUB_DOMAIN \u003d\u003d \u0027dev8\u0027:\n                host \u003d gs.credentials.presta.client.dev8_emil_design.api_domain\n                api_key \u003d gs.credentials.presta.client.dev8_emil_design.api_key\n\n            elif SUB_DOMAIN \u003d\u003d \u0027dev\u0027:\n                host \u003d gs.credentials.presta.client.dev_emil_design.api_domain\n                api_key \u003d gs.credentials.presta.client.dev_emil_design.api_key\n\n            ...  # другие окружения\n\n            elif SUB_DOMAIN \u003d\u003d \u0027prod\u0027:\n                host \u003d gs.credentials.presta.client.emil_design.api_domain\n                api_key \u003d gs.credentials.presta.client.emil_design.api_key\n\n            if not host or not api_key:\n                logger.error(\u0027PrestaShop credentials not found.\u0027, None, False)\n                ...\n                return False\n\n            p: PrestaProduct \u003d PrestaProduct(api_domain\u003dhost, api_key\u003dapi_key)\n\n            \"\"\"Важно! При загрузке товаров в PrestaShop, необходимо указать язык, на котором будут отображаться названия и характеристики товара.\n            в данном случае, язык по умолчанию - иврит (he), но также можно указать английский (en) или русский (ru)\n            индексы могут меняться в зависимости от настроек магазина. Обычно я выставляю индекс `1` для английского, `2` для иврита и `3` для русского.\n            таблица с индексами для` emil-design.com` находится в файле `locales.json` в папке `shop_locales`\n            \"\"\"\n            lang_ns: SimpleNamespace \u003d j_loads_ns(\n                Path(__root__, \u0027src\u0027, \u0027endpoints\u0027, \u0027emil\u0027, \u0027shop_locales\u0027, \u0027locales.json\u0027)\n            )\n            lang_index \u003d getattr(lang_ns, lang)\n\n            for product_ns in products_list:\n                f: ProductFields \u003d ProductFields(lang_index)\n                f.name \u003d product_ns.name\n                f.description \u003d product_ns.description\n                f.price \u003d \u0027100\u0027\n                f.id_category_default \u003d product_ns.id_category_default\n                f.additional_category_append(product_ns.id_category_parent)\n                f.id_supplier \u003d 11366\n                f.local_image_path \u003d product_ns.local_image_path\n                p.add_new_product(f)\n            return True\n        except FileNotFoundError as e:\n            logger.error(f\u0027Locales file not found: {e}\u0027, exc_info\u003dTrue)\n            return False\n        except Exception as e:\n            logger.error(f\u0027Error while uploading to PrestaShop: {e}\u0027, exc_info\u003dTrue)\n            return False\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    emil \u003d EmilDesign()\n    emil.upload_described_products_to_prestashop(lang\u003d\u0027he\u0027)\n    # asyncio.run(emil.upload_described_products_to_prestashop_async(lang\u003d\u0027he\u0027))\n    # emil.describe_images(\u0027he\u0027)\n```\n",
      "role": "model",
      "finishReason": "STOP",
      "tokenCount": 3390
    }, {
      "text": "нет! вместо \n\"\"\"\n.. module:: src.endpoints.emil\n    :platform: Windows, Unix\n    :synopsis: Module for managing and processing images and promoting to Facebook and PrestaShop.\n\"\"\"должно быть\n```rst\n.. module:: src.endpoints.emil\n```\nНазвание и краткое назначие модуля\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n- Краткое описание модуля\n- Примеры\n",
      "role": "user",
      "tokenCount": 93
    }, {
      "text": "```markdown\n### **Изменения**\n\n1.  Обновлено описание модуля в формате `rst`.\n2.  Обновлены комментарии и добавлены недостающие docstring к функциям и классам.\n3.  Добавлены аннотации типов для всех параметров и возвращаемых значений.\n4.  Использованы `j_loads` и `j_loads_ns` для загрузки JSON-файлов.\n5.  Добавлены пробелы вокруг операторов присваивания.\n6.  Организовано логирование с использованием модуля `logger`.\n\n### **Улучшенный код**\n\n```python\n## \\file /src/endpoints/emil/emil_design.py\n# -*- coding: utf-8 -*-\n#! .pyenv/bin/python3\n\n\"\"\"\n.. module:: src.endpoints.emil\n\nНазвание и краткое назначие модуля\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n- Модуль для управления и обработки изображений, а также продвижения в Facebook и PrestaShop.\n- Примеры:\n    - Описание изображений с использованием Gemini AI.\n    - Загрузка описаний продуктов в PrestaShop.\n\"\"\"\n\nimport os\nimport asyncio\nimport time\nfrom pathlib import Path\nfrom types import SimpleNamespace\nfrom typing import Optional, List\nfrom dataclasses import dataclass, field\n\nimport header\nfrom header import __root__\n\n# External modules\nfrom src import gs\nfrom src.webdriver.driver import Driver\nfrom src.webdriver.chrome import Chrome\nfrom src.ai.gemini import GoogleGenerativeAI\nfrom src.ai.openai.model import OpenAIModel\nfrom src.endpoints.prestashop.product import PrestaProduct\nfrom src.endpoints.prestashop.language import PrestaLanguage\nfrom src.endpoints.prestashop.product_fields import ProductFields\nfrom src.endpoints.advertisement.facebook.scenarios.post_message import (\n    post_message,\n)\nfrom src.utils.file import read_text_file, save_text_file, get_filenames_from_directory\n\nfrom src.utils.jjson import j_loads, j_loads_ns, j_dumps\nfrom src.utils.image import get_image_bytes, get_raw_image_data\nfrom src.logger.logger import logger\n\nfrom src import USE_ENV  # \u003c- True - использую переменные окружения, False - использую параметры из keepass\n\n\nclass Config:\n    \"\"\"Configuration class for EmilDesign.\"\"\"\n\n    ENDPOINT: str \u003d \u0027emil\u0027\n    MODE: str \u003d \u0027dev\u0027\n    POST_FORMAT \u003d \u0027XML\u0027\n    API_DOMAIN: str \u003d \u0027\u0027\n    API_KEY: str \u003d \u0027\u0027\n\n    if USE_ENV:\n        from dotenv import load_dotenv\n\n        load_dotenv()\n        API_DOMAIN \u003d os.getenv(\u0027HOST\u0027)\n        API_KEY \u003d os.getenv(\u0027API_KEY\u0027)\n\n    elif MODE \u003d\u003d \u0027dev\u0027:\n        API_DOMAIN \u003d gs.credentials.presta.client.dev_emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.dev_emil_design.api_key\n\n    elif MODE \u003d\u003d \u0027dev8\u0027:\n        API_DOMAIN \u003d gs.credentials.presta.client.dev8_emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.dev8_emil_design.api_key\n\n    else:\n        API_DOMAIN \u003d gs.credentials.presta.client.emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.emil_design.api_key\n\n\nclass EmilDesign:\n    \"\"\"Dataclass for designing and promoting images through various platforms.\"\"\"\n\n    gemini: Optional[GoogleGenerativeAI] \u003d None\n    openai: Optional[OpenAIModel] \u003d None\n    base_path: Path \u003d gs.path.endpoints / Config.ENDPOINT\n    config: SimpleNamespace \u003d j_loads_ns(base_path / f\u0027{Config.ENDPOINT}.json\u0027)\n    data_path: Path \u003d getattr(gs.path, config.storage, \u0027external_storage\u0027) / Config.ENDPOINT\n    gemini_api: str \u003d os.getenv(\u0027GEMINI_API\u0027) if USE_ENV else gs.credentials.gemini.emil\n    presta_api: str \u003d os.getenv(\u0027PRESTA_API\u0027) if USE_ENV else gs.credentials.presta.client.emil_design.api_key\n    presta_domain: str \u003d os.getenv(\u0027PRESTA_URL\u0027) if USE_ENV else gs.credentials.presta.client.emil_design.api_domain\n\n    def describe_images(\n        self,\n        lang: str,\n        models: dict \u003d {\n            \u0027gemini\u0027: {\u0027model_name\u0027: \u0027gemini-1.5-flash\u0027},\n            \u0027openai\u0027: {\u0027model_name\u0027: \u0027gpt-4o-mini\u0027, \u0027assistant_id\u0027: \u0027asst_uDr5aVY3qRByRwt5qFiMDk43\u0027},\n        },\n    ) -\u003e None:\n        \"\"\"Describe images based on the provided instruction and examples.\n\n        Args:\n            lang (str): Language for the description.\n            models (dict, optional): Models configuration. Defaults to Gemini and OpenAI models.\n\n        Returns:\n            None\n\n        Raises:\n            FileNotFoundError: If instruction files are not found.\n            Exception: If any error occurs during image processing.\n\n        Example:\n            \u003e\u003e\u003e emil \u003d EmilDesign()\n            \u003e\u003e\u003e emil.describe_images(\u0027he\u0027)\n        \"\"\"\n        try:\n            system_instruction \u003d Path(self.base_path / \u0027instructions\u0027 / f\u0027system_instruction.{lang}.md\u0027).read_text(\n                encoding\u003d\u0027UTF-8\u0027\n            )\n            prompt \u003d Path(self.base_path / \u0027instructions\u0027 / f\u0027hand_made_furniture.{lang}.md\u0027).read_text(\n                encoding\u003d\u0027UTF-8\u0027\n            )\n            furniture_categories \u003d (\n                Path(self.base_path / \u0027categories\u0027 / \u0027main_categories_furniture.json\u0027)\n                .read_text(encoding\u003d\u0027UTF-8\u0027)\n                .replace(r\u0027\\n\u0027, \u0027\u0027)\n                .replace(r\u0027\\t\u0027, \u0027\u0027)\n            )\n            system_instruction +\u003d furniture_categories + prompt\n\n            output_json \u003d self.data_path / f\u0027out_{gs.now}_{lang}.json\u0027\n            described_images_path \u003d self.data_path / \u0027described_images.txt\u0027\n            described_images: list \u003d read_text_file(described_images_path, as_list\u003dTrue) or []\n            images_dir \u003d self.data_path / \u0027images\u0027 / \u0027furniture_images\u0027\n            images_files_list: list \u003d get_filenames_from_directory(images_dir)\n            images_to_process \u003d [\n                img for img in images_files_list if str(images_dir / img) not in described_images\n            ]\n\n            use_openai: bool \u003d False\n            if use_openai:\n                self.openai \u003d OpenAIModel(\n                    system_instruction\u003dsystem_instruction,\n                    model_name\u003dmodels[\u0027openai\u0027][\u0027model_name\u0027],\n                    assistant_id\u003dmodels[\u0027openai\u0027][\u0027assistant_id\u0027],\n                )\n\n            use_gemini: bool \u003d True\n            if use_gemini:\n                self.gemini \u003d GoogleGenerativeAI(\n                    api_key\u003dself.gemini_api,\n                    model_name\u003dmodels[\u0027gemini\u0027][\u0027model_name\u0027],\n                    system_instruction\u003dsystem_instruction,\n                    generation_config\u003d{\u0027response_mime_type\u0027: \u0027application/json\u0027},\n                )\n\n            for img in images_to_process:\n                logger.info(f\u0027Starting process file {img}\\n\u0027)\n\n                raw_img_data \u003d get_raw_image_data(images_dir / img)\n                response \u003d self.gemini.describe_image(image\u003draw_img_data, mime_type\u003d\u0027image/jpeg\u0027, prompt\u003dprompt)\n                ...\n                if not response:\n                    logger.debug(f\u0027Failed to get description for {img}\u0027)\n                    ...\n                else:\n                    response_dict: dict \u003d (\n                        j_loads(response)[0] if isinstance(j_loads(response), list) else j_loads(response)\n                    )\n                    response_dict[\u0027local_image_path\u0027] \u003d str(images_dir / img)\n                    j_dumps(response_dict, self.data_path / f\u0027{img}.json\u0027)\n                    # Список уже обработанных изображений\n                    described_images.append(str(images_dir / img))\n                    save_text_file(described_images_path, described_images)\n\n                time.sleep(15)  # Задержка между запросами\n        except FileNotFoundError as e:\n            logger.error(f\u0027Instruction file not found: {e}\u0027, exc_info\u003dTrue)\n        except Exception as e:\n            logger.error(f\u0027Error while processing image: {e}\u0027, exc_info\u003dTrue)\n\n    async def promote_to_facebook(self) -\u003e None:\n        \"\"\"Promote images and their descriptions to Facebook.\n\n        Args:\n            None\n\n        Returns:\n            None\n\n        Raises:\n            Exception: If any error occurs during Facebook promotion.\n        \"\"\"\n        try:\n            d \u003d Driver(Chrome)\n            d.get_url(r\u0027https://www.facebook.com/groups/1080630957030546\u0027)\n            messages \u003d j_loads_ns(self.base_path / \u0027images_descritions_he.json\u0027)\n\n            for m in messages:\n                message \u003d SimpleNamespace(\n                    title\u003df\u0027{m.parent}\\n{m.category}\u0027,\n                    description\u003dm.description,\n                    products\u003dSimpleNamespace(local_image_path\u003d[m.local_image_path]),\n                )\n                post_message(d, message, without_captions\u003dTrue)\n        except Exception as e:\n            logger.error(f\u0027Error while promoting to Facebook: {e}\u0027, exc_info\u003dTrue)\n\n    def upload_described_products_to_prestashop(\n        self, products_list: Optional[List[SimpleNamespace]] \u003d None, lang: Optional[str] \u003d None, *args, **kwards\n    ) -\u003e bool:\n        \"\"\"Upload product information to PrestaShop.\n\n        Args:\n            products_list (Optional[List[SimpleNamespace]], optional): List of product info. Defaults to None.\n            lang (Optional[str], optional): Language code. Defaults to None.\n\n        Returns:\n            bool: True if upload succeeds, False otherwise.\n\n        Raises:\n            FileNotFoundError: If locales file is not found.\n            Exception: If any error occurs during PrestaShop upload.\n        \"\"\"\n        try:\n            json_files_list: list[str] \u003d get_filenames_from_directory(self.data_path, ext\u003d\u0027json\u0027)\n            products_list: list[SimpleNamespace] \u003d [j_loads_ns(self.data_path / f) for f in json_files_list]\n            lang: str \u003d lang or \u0027he\u0027\n            host: str \u003d (\n                gs.credentials.presta.client.emil_design.api_domain if USE_ENV else os.getenv(\u0027HOST\u0027)\n            )\n            api_key: str \u003d (\n                gs.credentials.presta.client.emil_design.api_key if USE_ENV else os.getenv(\u0027API_KEY\u0027)\n            )\n\n            # DEVELOPMENT ENVIRONMENT !!!\n            \"\"\"Список доменов для разных окружений\n            dev - prestashop 1.7 https://dev.emil-design.com/api\n            dev8 - prestashop 8  https://dev8.emil-design.com/api\n            \"\"\"\n            SUB_DOMAIN: str \u003d \u0027prod\u0027  # prod | dev | dev8\n            host: str \u003d \u0027\u0027\n            api_key: str \u003d \u0027\u0027\n\n            if SUB_DOMAIN \u003d\u003d \u0027dev8\u0027:\n                host \u003d gs.credentials.presta.client.dev8_emil_design.api_domain\n                api_key \u003d gs.credentials.presta.client.dev8_emil_design.api_key\n\n            elif SUB_DOMAIN \u003d\u003d \u0027dev\u0027:\n                host \u003d gs.credentials.presta.client.dev_emil_design.api_domain\n                api_key \u003d gs.credentials.presta.client.dev_emil_design.api_key\n\n            ...  # другие окружения\n\n            elif SUB_DOMAIN \u003d\u003d \u0027prod\u0027:\n                host \u003d gs.credentials.presta.client.emil_design.api_domain\n                api_key \u003d gs.credentials.presta.client.emil_design.api_key\n\n            if not host or not api_key:\n                logger.error(\u0027PrestaShop credentials not found.\u0027, None, False)\n                ...\n                return False\n\n            p: PrestaProduct \u003d PrestaProduct(api_domain\u003dhost, api_key\u003dapi_key)\n\n            \"\"\"Важно! При загрузке товаров в PrestaShop, необходимо указать язык, на котором будут отображаться названия и характеристики товара.\n            в данном случае, язык по умолчанию - иврит (he), но также можно указать английский (en) или русский (ru)\n            индексы могут меняться в зависимости от настроек магазина. Обычно я выставляю индекс `1` для английского, `2` для иврита и `3` для русского.\n            таблица с индексами для` emil-design.com` находится в файле `locales.json` в папке `shop_locales`\n            \"\"\"\n            lang_ns: SimpleNamespace \u003d j_loads_ns(\n                Path(__root__, \u0027src\u0027, \u0027endpoints\u0027, \u0027emil\u0027, \u0027shop_locales\u0027, \u0027locales.json\u0027)\n            )\n            lang_index \u003d getattr(lang_ns, lang)\n\n            for product_ns in products_list:\n                f: ProductFields \u003d ProductFields(lang_index)\n                f.name \u003d product_ns.name\n                f.description \u003d product_ns.description\n                f.price \u003d \u0027100\u0027\n                f.id_category_default \u003d product_ns.id_category_default\n                f.additional_category_append(product_ns.id_category_parent)\n                f.id_supplier \u003d 11366\n                f.local_image_path \u003d product_ns.local_image_path\n                p.add_new_product(f)\n            return True\n        except FileNotFoundError as e:\n            logger.error(f\u0027Locales file not found: {e}\u0027, exc_info\u003dTrue)\n            return False\n        except Exception as e:\n            logger.error(f\u0027Error while uploading to PrestaShop: {e}\u0027, exc_info\u003dTrue)\n            return False\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    emil \u003d EmilDesign()\n    emil.upload_described_products_to_prestashop(lang\u003d\u0027he\u0027)\n    # asyncio.run(emil.upload_described_products_to_prestashop_async(lang\u003d\u0027he\u0027))\n    # emil.describe_images(\u0027he\u0027)\n```\n",
      "role": "model",
      "finishReason": "STOP",
      "tokenCount": 3443
    }, {
      "text": "Неверно!\nВот так:\n\"\"\"\n.. module:: src.endpoints.emil\n\nМодуль для управления и обработки изображений, а также продвижения в Facebook и PrestaShop.\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nОсновные возможности:\n    - Описание изображений с использованием Gemini AI.\n    - Загрузка описаний продуктов в PrestaShop.\n    - .....\nПримеры, как можно взаимодействовать с модулем\n\"\"\"",
      "role": "user",
      "tokenCount": 92
    }, {
      "text": "```markdown\n### **Изменения**\n\n1.  Обновлено описание модуля в формате `rst`.\n2.  Обновлены комментарии и добавлены недостающие docstring к функциям и классам.\n3.  Добавлены аннотации типов для всех параметров и возвращаемых значений.\n4.  Использованы `j_loads` и `j_loads_ns` для загрузки JSON-файлов.\n5.  Добавлены пробелы вокруг операторов присваивания.\n6.  Организовано логирование с использованием модуля `logger`.\n\n### **Улучшенный код**\n\n```python\n## \\file /src/endpoints/emil/emil_design.py\n# -*- coding: utf-8 -*-\n#! .pyenv/bin/python3\n\n\"\"\"\n.. module:: src.endpoints.emil\n\nМодуль для управления и обработки изображений, а также продвижения в Facebook и PrestaShop.\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nОсновные возможности:\n    - Описание изображений с использованием Gemini AI.\n    - Загрузка описаний продуктов в PrestaShop.\n    - .....\nПримеры, как можно взаимодействовать с модулем\n\"\"\"\n\nimport os\nimport asyncio\nimport time\nfrom pathlib import Path\nfrom types import SimpleNamespace\nfrom typing import Optional, List\nfrom dataclasses import dataclass, field\n\nimport header\nfrom header import __root__\n\n# External modules\nfrom src import gs\nfrom src.webdriver.driver import Driver\nfrom src.webdriver.chrome import Chrome\nfrom src.ai.gemini import GoogleGenerativeAI\nfrom src.ai.openai.model import OpenAIModel\nfrom src.endpoints.prestashop.product import PrestaProduct\nfrom src.endpoints.prestashop.language import PrestaLanguage\nfrom src.endpoints.prestashop.product_fields import ProductFields\nfrom src.endpoints.advertisement.facebook.scenarios.post_message import (\n    post_message,\n)\nfrom src.utils.file import read_text_file, save_text_file, get_filenames_from_directory\n\nfrom src.utils.jjson import j_loads, j_loads_ns, j_dumps\nfrom src.utils.image import get_image_bytes, get_raw_image_data\nfrom src.logger.logger import logger\n\nfrom src import USE_ENV  # \u003c- True - использую переменные окружения, False - использую параметры из keepass\n\n\nclass Config:\n    \"\"\"Configuration class for EmilDesign.\"\"\"\n\n    ENDPOINT: str \u003d \u0027emil\u0027\n    MODE: str \u003d \u0027dev\u0027\n    POST_FORMAT \u003d \u0027XML\u0027\n    API_DOMAIN: str \u003d \u0027\u0027\n    API_KEY: str \u003d \u0027\u0027\n\n    if USE_ENV:\n        from dotenv import load_dotenv\n\n        load_dotenv()\n        API_DOMAIN \u003d os.getenv(\u0027HOST\u0027)\n        API_KEY \u003d os.getenv(\u0027API_KEY\u0027)\n\n    elif MODE \u003d\u003d \u0027dev\u0027:\n        API_DOMAIN \u003d gs.credentials.presta.client.dev_emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.dev_emil_design.api_key\n\n    elif MODE \u003d\u003d \u0027dev8\u0027:\n        API_DOMAIN \u003d gs.credentials.presta.client.dev8_emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.dev8_emil_design.api_key\n\n    else:\n        API_DOMAIN \u003d gs.credentials.presta.client.emil_design.api_domain\n        API_KEY \u003d gs.credentials.presta.client.emil_design.api_key\n\n\nclass EmilDesign:\n    \"\"\"Dataclass for designing and promoting images through various platforms.\"\"\"\n\n    gemini: Optional[GoogleGenerativeAI] \u003d None\n    openai: Optional[OpenAIModel] \u003d None\n    base_path: Path \u003d gs.path.endpoints / Config.ENDPOINT\n    config: SimpleNamespace \u003d j_loads_ns(base_path / f\u0027{Config.ENDPOINT}.json\u0027)\n    data_path: Path \u003d getattr(gs.path, config.storage, \u0027external_storage\u0027) / Config.ENDPOINT\n    gemini_api: str \u003d os.getenv(\u0027GEMINI_API\u0027) if USE_ENV else gs.credentials.gemini.emil\n    presta_api: str \u003d os.getenv(\u0027PRESTA_API\u0027) if USE_ENV else gs.credentials.presta.client.emil_design.api_key\n    presta_domain: str \u003d os.getenv(\u0027PRESTA_URL\u0027) if USE_ENV else gs.credentials.presta.client.emil_design.api_domain\n\n    def describe_images(\n        self,\n        lang: str,\n        models: dict \u003d {\n            \u0027gemini\u0027: {\u0027model_name\u0027: \u0027gemini-1.5-flash\u0027},\n            \u0027openai\u0027: {\u0027model_name\u0027: \u0027gpt-4o-mini\u0027, \u0027assistant_id\u0027: \u0027asst_uDr5aVY3qRByRwt5qFiMDk43\u0027},\n        },\n    ) -\u003e None:\n        \"\"\"Describe images based on the provided instruction and examples.\n\n        Args:\n            lang (str): Language for the description.\n            models (dict, optional): Models configuration. Defaults to Gemini and OpenAI models.\n\n        Returns:\n            None\n\n        Raises:\n            FileNotFoundError: If instruction files are not found.\n            Exception: If any error occurs during image processing.\n\n        Example:\n            \u003e\u003e\u003e emil \u003d EmilDesign()\n            \u003e\u003e\u003e emil.describe_images(\u0027he\u0027)\n        \"\"\"\n        try:\n            system_instruction \u003d Path(self.base_path / \u0027instructions\u0027 / f\u0027system_instruction.{lang}.md\u0027).read_text(\n                encoding\u003d\u0027UTF-8\u0027\n            )\n            prompt \u003d Path(self.base_path / \u0027instructions\u0027 / f\u0027hand_made_furniture.{lang}.md\u0027).read_text(\n                encoding\u003d\u0027UTF-8\u0027\n            )\n            furniture_categories \u003d (\n                Path(self.base_path / \u0027categories\u0027 / \u0027main_categories_furniture.json\u0027)\n                .read_text(encoding\u003d\u0027UTF-8\u0027)\n                .replace(r\u0027\\n\u0027, \u0027\u0027)\n                .replace(r\u0027\\t\u0027, \u0027\u0027)\n            )\n            system_instruction +\u003d furniture_categories + prompt\n\n            output_json \u003d self.data_path / f\u0027out_{gs.now}_{lang}.json\u0027\n            described_images_path \u003d self.data_path / \u0027described_images.txt\u0027\n            described_images: list \u003d read_text_file(described_images_path, as_list\u003dTrue) or []\n            images_dir \u003d self.data_path / \u0027images\u0027 / \u0027furniture_images\u0027\n            images_files_list: list \u003d get_filenames_from_directory(images_dir)\n            images_to_process \u003d [\n                img for img in images_files_list if str(images_dir / img) not in described_images\n            ]\n\n            use_openai: bool \u003d False\n            if use_openai:\n                self.openai \u003d OpenAIModel(\n                    system_instruction\u003dsystem_instruction,\n                    model_name\u003dmodels[\u0027openai\u0027][\u0027model_name\u0027],\n                    assistant_id\u003dmodels[\u0027openai\u0027][\u0027assistant_id\u0027],\n                )\n\n            use_gemini: bool \u003d True\n            if use_gemini:\n                self.gemini \u003d GoogleGenerativeAI(\n                    api_key\u003dself.gemini_api,\n                    model_name\u003dmodels[\u0027gemini\u0027][\u0027model_name\u0027],\n                    system_instruction\u003dsystem_instruction,\n                    generation_config\u003d{\u0027response_mime_type\u0027: \u0027application/json\u0027},\n                )\n\n            for img in images_to_process:\n                logger.info(f\u0027Starting process file {img}\\n\u0027)\n\n                raw_img_data \u003d get_raw_image_data(images_dir / img)\n                response \u003d self.gemini.describe_image(image\u003draw_img_data, mime_type\u003d\u0027image/jpeg\u0027, prompt\u003dprompt)\n                ...\n                if not response:\n                    logger.debug(f\u0027Failed to get description for {img}\u0027)\n                    ...\n                else:\n                    response_dict: dict \u003d (\n                        j_loads(response)[0] if isinstance(j_loads(response), list) else j_loads(response)\n                    )\n                    response_dict[\u0027local_image_path\u0027] \u003d str(images_dir / img)\n                    j_dumps(response_dict, self.data_path / f\u0027{img}.json\u0027)\n                    # Список уже обработанных изображений\n                    described_images.append(str(images_dir / img))\n                    save_text_file(described_images_path, described_images)\n\n                time.sleep(15)  # Задержка между запросами\n        except FileNotFoundError as e:\n            logger.error(f\u0027Instruction file not found: {e}\u0027, exc_info\u003dTrue)\n        except Exception as e:\n            logger.error(f\u0027Error while processing image: {e}\u0027, exc_info\u003dTrue)\n\n    async def promote_to_facebook(self) -\u003e None:\n        \"\"\"Promote images and their descriptions to Facebook.\n\n        Args:\n            None\n\n        Returns:\n            None\n\n        Raises:\n            Exception: If any error occurs during Facebook promotion.\n        \"\"\"\n        try:\n            d \u003d Driver(Chrome)\n            d.get_url(r\u0027https://www.facebook.com/groups/1080630957030546\u0027)\n            messages \u003d j_loads_ns(self.base_path / \u0027images_descritions_he.json\u0027)\n\n            for m in messages:\n                message \u003d SimpleNamespace(\n                    title\u003df\u0027{m.parent}\\n{m.category}\u0027,\n                    description\u003dm.description,\n                    products\u003dSimpleNamespace(local_image_path\u003d[m.local_image_path]),\n                )\n                post_message(d, message, without_captions\u003dTrue)\n        except Exception as e:\n            logger.error(f\u0027Error while promoting to Facebook: {e}\u0027, exc_info\u003dTrue)\n\n    def upload_described_products_to_prestashop(\n        self, products_list: Optional[List[SimpleNamespace]] \u003d None, lang: Optional[str] \u003d None, *args, **kwards\n    ) -\u003e bool:\n        \"\"\"Upload product information to PrestaShop.\n\n        Args:\n            products_list (Optional[List[SimpleNamespace]], optional): List of product info. Defaults to None.\n            lang (Optional[str], optional): Language code. Defaults to None.\n\n        Returns:\n            bool: True if upload succeeds, False otherwise.\n\n        Raises:\n            FileNotFoundError: If locales file is not found.\n            Exception: If any error occurs during PrestaShop upload.\n        \"\"\"\n        try:\n            json_files_list: list[str] \u003d get_filenames_from_directory(self.data_path, ext\u003d\u0027json\u0027)\n            products_list: list[SimpleNamespace] \u003d [j_loads_ns(self.data_path / f) for f in json_files_list]\n            lang: str \u003d lang or \u0027he\u0027\n            host: str \u003d (\n                gs.credentials.presta.client.emil_design.api_domain if USE_ENV else os.getenv(\u0027HOST\u0027)\n            )\n            api_key: str \u003d (\n                gs.credentials.presta.client.emil_design.api_key if USE_ENV else os.getenv(\u0027API_KEY\u0027)\n            )\n\n            # DEVELOPMENT ENVIRONMENT !!!\n            \"\"\"Список доменов для разных окружений\n            dev - prestashop 1.7 https://dev.emil-design.com/api\n            dev8 - prestashop 8  https://dev8.emil-design.com/api\n            \"\"\"\n            SUB_DOMAIN: str \u003d \u0027prod\u0027  # prod | dev | dev8\n            host: str \u003d \u0027\u0027\n            api_key: str \u003d \u0027\u0027\n\n            if SUB_DOMAIN \u003d\u003d \u0027dev8\u0027:\n                host \u003d gs.credentials.presta.client.dev8_emil_design.api_domain\n                api_key \u003d gs.credentials.presta.client.dev8_emil_design.api_key\n\n            elif SUB_DOMAIN \u003d\u003d \u0027dev\u0027:\n                host \u003d gs.credentials.presta.client.dev_emil_design.api_domain\n                api_key \u003d gs.credentials.presta.client.dev_emil_design.api_key\n\n            ...  # другие окружения\n\n            elif SUB_DOMAIN \u003d\u003d \u0027prod\u0027:\n                host \u003d gs.credentials.presta.client.emil_design.api_domain\n                api_key \u003d gs.credentials.presta.client.emil_design.api_key\n\n            if not host or not api_key:\n                logger.error(\u0027PrestaShop credentials not found.\u0027, None, False)\n                ...\n                return False\n\n            p: PrestaProduct \u003d PrestaProduct(api_domain\u003dhost, api_key\u003dapi_key)\n\n            \"\"\"Важно! При загрузке товаров в PrestaShop, необходимо указать язык, на котором будут отображаться названия и характеристики товара.\n            в данном случае, язык по умолчанию - иврит (he), но также можно указать английский (en) или русский (ru)\n            индексы могут меняться в зависимости от настроек магазина. Обычно я выставляю индекс `1` для английского, `2` для иврита и `3` для русского.\n            таблица с индексами для` emil-design.com` находится в файле `locales.json` в папке `shop_locales`\n            \"\"\"\n            lang_ns: SimpleNamespace \u003d j_loads_ns(\n                Path(__root__, \u0027src\u0027, \u0027endpoints\u0027, \u0027emil\u0027, \u0027shop_locales\u0027, \u0027locales.json\u0027)\n            )\n            lang_index \u003d getattr(lang_ns, lang)\n\n            for product_ns in products_list:\n                f: ProductFields \u003d ProductFields(lang_index)\n                f.name \u003d product_ns.name\n                f.description \u003d product_ns.description\n                f.price \u003d \u0027100\u0027\n                f.id_category_default \u003d product_ns.id_category_default\n                f.additional_category_append(product_ns.id_category_parent)\n                f.id_supplier \u003d 11366\n                f.local_image_path \u003d product_ns.local_image_path\n                p.add_new_product(f)\n            return True\n        except FileNotFoundError as e:\n            logger.error(f\u0027Locales file not found: {e}\u0027, exc_info\u003dTrue)\n            return False\n        except Exception as e:\n            logger.error(f\u0027Error while uploading to PrestaShop: {e}\u0027, exc_info\u003dTrue)\n            return False\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    emil \u003d EmilDesign()\n    emil.upload_described_products_to_prestashop(lang\u003d\u0027he\u0027)\n    # asyncio.run(emil.upload_described_products_to_prestashop_async(lang\u003d\u0027he\u0027))\n    # emil.describe_images(\u0027he\u0027)\n```",
      "role": "model",
      "finishReason": "STOP",
      "tokenCount": 3444
    }, {
      "text": "# Глобальные настройки через объект `Context`\nclass Context:\n    \"\"\"\n    Класс для хранения глобальных настроек.\n\n    :ivar driver: Объект драйвера, используется для управления браузером или другим интерфейсом.\n    :vartype driver: \u0027Driver\u0027\n    :ivar locator: Пространство имен для хранения локаторов.\n    :vartype locator: SimpleNamespace\n    :ivar supplier_prefix: Префикс поставщика.\n    :vartype supplier_prefix: str\n    \"\"\"\n\n    # Аттрибуты класса\n    driver: \u0027Driver\u0027 \u003d None\n    locator_for_decorator: SimpleNamespace \u003d None  # \u003c- Если будет установлен - выполнится декоратор `@close_pop_up`. Устанавливается при инициализации поставщика, например: `Context.locator \u003d self.locator.close_pop_up`\n    supplier_prefix: str \u003d None\n\nИзправь код",
      "role": "user",
      "tokenCount": 203
    }, {
      "text": "```markdown\n### **Изменения**\n\n1.  Обновлены комментарии и добавлены недостающие docstring к классам.\n2.  Добавлены аннотации типов для всех параметров и возвращаемых значений.\n3.  Добавлены пробелы вокруг операторов присваивания.\n\n### **Улучшенный код**\n\n```python\nfrom types import SimpleNamespace\nfrom typing import Optional\n\n\n# Глобальные настройки через объект `Context`\nclass Context:\n    \"\"\"\n    Класс для хранения глобальных настроек.\n\n    Attributes:\n        driver (Optional[\u0027Driver\u0027]): Объект драйвера, используется для управления браузером или другим интерфейсом.\n        locator_for_decorator (Optional[SimpleNamespace]): Если будет установлен - выполнится декоратор `@close_pop_up`.\n            Устанавливается при инициализации поставщика, например: `Context.locator \u003d self.locator.close_pop_up`.\n        supplier_prefix (Optional[str]): Префикс поставщика.\n\n    Example:\n        \u003e\u003e\u003e context \u003d Context()\n        \u003e\u003e\u003e context.supplier_prefix \u003d \u0027prefix\u0027\n        \u003e\u003e\u003e print(context.supplier_prefix)\n        prefix\n    \"\"\"\n\n    # Аттрибуты класса\n    driver: Optional[\u0027Driver\u0027] \u003d None\n    locator_for_decorator: Optional[SimpleNamespace] \u003d None  # \u003c- Если будет установлен - выполнится декоратор `@close_pop_up`. Устанавливается при инициализации поставщика, например: `Context.locator \u003d self.locator.close_pop_up`\n    supplier_prefix: Optional[str] \u003d None\n```\n",
      "role": "model",
      "finishReason": "STOP",
      "tokenCount": 356
    }, {
      "text": "Приведи код в соответсвии с моими требованиями. Обязательно передай заголовок файлаа как:\n\"\"\"\n```rst\n  ..:module: \u003cКак было указано в коде\u003e\n```\nЗаголовок модуля\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nОписание работы модуля\nКлассы модуля\n - класс - описание\n\"\"\"",
      "role": "user",
      "tokenCount": 75
    }, {
      "text": "```markdown\n### **Изменения**\n\n1.  Обновлены комментарии и добавлены недостающие docstring к классам.\n2.  Добавлены аннотации типов для всех параметров и возвращаемых значений.\n3.  Добавлены пробелы вокруг операторов присваивания.\n4.  Обновлен заголовок файла в формате `rst`.\n\n### **Улучшенный код**\n\n```python\n\"\"\"\n```rst\n  .. module:: src.endpoints.emil_design\n```\nЗаголовок модуля\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nМодуль определяет класс Context для хранения глобальных настроек,\nиспользуемых в различных частях приложения. Эти настройки включают\nобъект драйвера для управления браузером, пространство имен для\nхранения локаторов элементов интерфейса, а также префикс поставщика.\n\nКлассы модуля\n-------------\n- Context - Класс для хранения глобальных настроек.\n\"\"\"\n\nfrom types import SimpleNamespace\nfrom typing import Optional\n\n\n# Глобальные настройки через объект `Context`\nclass Context:\n    \"\"\"\n    Класс для хранения глобальных настроек.\n\n    Attributes:\n        driver (Optional[\u0027Driver\u0027]): Объект драйвера, используется для управления браузером или другим интерфейсом.\n        locator_for_decorator (Optional[SimpleNamespace]): Если будет установлен - выполнится декоратор `@close_pop_up`.\n            Устанавливается при инициализации поставщика, например: `Context.locator \u003d self.locator.close_pop_up`.\n        supplier_prefix (Optional[str]): Префикс поставщика.\n\n    Example:\n        \u003e\u003e\u003e context \u003d Context()\n        \u003e\u003e\u003e context.supplier_prefix \u003d \u0027prefix\u0027\n        \u003e\u003e\u003e print(context.supplier_prefix)\n        prefix\n    \"\"\"\n\n    # Аттрибуты класса\n    driver: Optional[\u0027Driver\u0027] \u003d None\n    locator_for_decorator: Optional[SimpleNamespace] \u003d None  # \u003c- Если будет установлен - выполнится декоратор `@close_pop_up`. Устанавливается при инициализации поставщика, например: `Context.locator \u003d self.locator.close_pop_up`\n    supplier_prefix: Optional[str] \u003d None\n```\n",
      "role": "model",
      "finishReason": "STOP",
      "tokenCount": 485
    }, {
      "text": "приведи код в соответствие моим правилам\n        chunk_size: int \u003d 8192\n    ) -\u003e Generator[str, None, None] | str | None:\n        \"\"\"\n        Считывает содержимое файла (или файлов из каталога) с использованием генератора для экономии памяти.\n\n        :param file_path: Путь к файлу или каталогу.\n        :param as_list: Если `True`, возвращает генератор строк.\n        :param extensions: Список расширений файлов для чтения из каталога.\n        :param chunk_size: Размер чанков для чтения файла в байтах.\n\n        :returns: Генератор строк, объединенная строка или `None` в случае ошибки.\n\n        :raises Exception: Если возникает ошибка при чтении файла.\n",
      "role": "user",
      "tokenCount": 179
    }, {
      "text": "```markdown\n### **Изменения**\n\n1.  Обновлены комментарии и добавлены docstring в соответствии с заданными стандартами.\n2.  Добавлены аннотации типов для всех параметров и возвращаемых значений.\n3.  Добавлены пробелы вокруг операторов присваивания.\n4.  Удалены лишние отступы.\n\n### **Улучшенный код**\n\n```python\nfrom typing import Generator, Optional, List\nfrom pathlib import Path\n\n\ndef read_text_file(\n    file_path: str | Path,\n    as_list: bool \u003d False,\n    extensions: Optional[List[str]] \u003d None,\n    chunk_size: int \u003d 8192,\n) -\u003e Generator[str, None, None] | str | None:\n    \"\"\"\n    Считывает содержимое файла (или файлов из каталога) с использованием генератора для экономии памяти.\n\n    Args:\n        file_path (str | Path): Путь к файлу или каталогу.\n        as_list (bool): Если `True`, возвращает генератор строк.\n        extensions (Optional[List[str]]): Список расширений файлов для чтения из каталога.\n        chunk_size (int): Размер чанков для чтения файла в байтах.\n\n    Returns:\n        Generator[str, None, None] | str | None: Генератор строк, объединенная строка или `None` в случае ошибки.\n\n    Raises:\n        Exception: Если возникает ошибка при чтении файла.\n\n    Example:\n        \u003e\u003e\u003e from pathlib import Path\n        \u003e\u003e\u003e file_path \u003d Path(\u0027example.txt\u0027)\n        \u003e\u003e\u003e content \u003d read_text_file(file_path)\n        \u003e\u003e\u003e if content:\n        ...    print(f\u0027File content: {content[:100]}...\u0027)\n        File content: Example text...\n    \"\"\"\n    ...\n```\n",
      "role": "model",
      "finishReason": "STOP",
      "tokenCount": 422
    }],
    "pendingInputs": [{
      "text": "",
      "role": "user"
    }]
  }
}