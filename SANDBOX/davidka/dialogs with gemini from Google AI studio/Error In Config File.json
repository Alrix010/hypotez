{
  "runSettings": {
    "temperature": 1.0,
    "model": "models/gemini-2.5-pro-preview-03-25",
    "topP": 0.95,
    "topK": 64,
    "maxOutputTokens": 65536,
    "safetySettings": [{
      "category": "HARM_CATEGORY_HARASSMENT",
      "threshold": "OFF"
    }, {
      "category": "HARM_CATEGORY_HATE_SPEECH",
      "threshold": "OFF"
    }, {
      "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
      "threshold": "OFF"
    }, {
      "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
      "threshold": "OFF"
    }],
    "responseMimeType": "text/plain",
    "enableCodeExecution": false,
    "enableSearchAsATool": false,
    "enableBrowseAsATool": false,
    "enableAutoFunctionResponse": false
  },
  "systemInstruction": {
  },
  "chunkedPrompt": {
    "chunks": [{
      "text": "в чем ошибка?\n```python\n@dataclass\nclass Config:\n\n    scenario_hb:dict \u003d {\n        \"supplier_prefix\":\"hb\",\n       \"url\": \"https://hbdeadsea.co.il/product-category/aromatherapy/diffusers/\",\n        \"train_product_url\":\"https://hbdeadsea.co.il/product/%d7%a7%d7%a8%d7%9d-%d7%a8%d7%92%d7%9c%d7%99%d7%99%d7%9d-%d7%90%d7%99%d7%a0%d7%98%d7%a0%d7%a1%d7%99%d7%91%d7%99-%d7%9e%d7%95%d7%a2%d7%a9%d7%a8-%d7%91%d7%91%d7%95%d7%a5-%d7%9e%d7%99%d7%9d-%d7%94%d7%9e-2/\",\n       \"name\": \"מפיצי ריח ומילוי\",\n       \"condition\": \"new\",\n       \"presta_categories\": {\n         \"default_category\": 11246,\n         \"additional_categories\": []\n       }\n    }\n    scenario_etzmaleh:dict \u003d {\n        \"supplier_prefix\":\"etzmaleh\",\n        \"url\":\"https://www.etzmaleh.co.il/montessori_collection\",\n        \"train_product_url\":\"https://www.etzmaleh.co.il/montessori_transition_bed\",\n        \"name\":\"הקולקציה המונטסורית\",\n        \"condition\":\"new\",\n           \"presta_categories\": {\n         \"default_category\": 11390,\n         \"additional_categories\": [11389]\n       }\n    }\n    scenario_amazon:dict \u003d  {\n        \"supplier_prefix\":\"amazon\",\n          \"url\": \"https://amzn.to/3OhRz2g\",\n            \"train_product_url\":\"https://www.amazon.com/C%C3%A1-dOro-Hippie-Colored-Murano-Style/dp/B09N53XSQB/ref\u003dsr_1_2_sspa?crid\u003d24Q0ZZYVNOQMP\u0026dib\u003deyJ2IjoiMSJ9.WhN_5Deyh2Yz9gRyrG1anDCr1UB8tnpHH_pJePpURaaciFWg_5Ft0XuS-e3A67g3rO1RECMmgpmRLEJOI7Zj6JyAd9DJh6dLSwUcHgHnJiKhmBmpa-AlDotmiq0-4Q_b90WkEmSsgIzC4L1Yc_KssvHa7bj6LGl6fMM4VuctS4nDQ3vYigYzB3jzP9Q3nT5BRv5_yRigaF-hDpPc0lL5wvo5gQ4i-9Jcy4vHyHNX04ZpoQBXrwcwLo3XWoruWSmnrgvQ5XxRzLntClGxBSN3cTjsunsHYzzKSp_VYx631JM.U1bRX0eDJ5c13nETwkLbN9BPt6-OtTKUvvRQiGodOd0\u0026dib_tag\u003dse\u0026keywords\u003dArt+Deco+murano+glass\u0026linkCode\u003dsl2\u0026linkId\u003d1a5da5b6a02f09a4d8fe47362e06cf3a\u0026qid\u003d1745171225\u0026sprefix\u003dart+deco+murano+glass%2Caps%2C230\u0026sr\u003d8-2-spons\u0026sp_csd\u003dd2lkZ2V0TmFtZT1zcF9hdGY\u0026psc\u003d1\",\n          \"condition\": \"new\",\n          \"presta_categories\": {\n            \"default_category\": 11209,\n            \"additional_categories\": [ 11206, 11388 ]\n          }\n        }\n    scenario_aliexpress:dict \u003d  {\n        \"supplier_prefix\":\"aliexpress\",\n          \"url\": \"https://www.aliexpress.com\",\n        \"train_product_url\":\"https://www.aliexpress.com/item/1005008108060545.html?spm\u003da2g0o.tm1000020483.d1.1.28f9474cPkErMV\u0026sourceType\u003d561\u0026pvid\u003d1a630f56-af44-4a5e-8fa6-ba39f7382734\u0026pdp_ext_f\u003d%7B%22ship_from%22:%22CN%22,%22sku_id%22:%2212000043799911402%22%7D\u0026scm\u003d1007.28480.422277.0\u0026scm-url\u003d1007.28480.422277.0\u0026scm_id\u003d1007.28480.422277.0\u0026pdp_npi\u003d4%40dis%21ILS%21%E2%82%AA%20119.48%21%E2%82%AA%2058.54%21%21%21231.15%21113.26%21%402141131717451712898942519ec7de%2112000043799911402%21gsd%21IL%213690978535%21\u0026channel\u003dsd\u0026aecmd\u003dtrue\",\n          \"condition\": \"new\",\n          \"presta_categories\": {\n            \"default_category\": 4292,\n            \"additional_categories\": []\n          }\n        }\n\n    scenarios_list:list \u003d [scenario_hb,]\n```\n\n\nTraceback (most recent call last):\n  File \"c:\\python312\\Lib\\runpy.py\", line 198, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\python312\\Lib\\runpy.py\", line 88, in _run_code\n    exec(code, run_globals)\n  File \"c:\\program files\\microsoft visual studio\\2022\\community\\common7\\ide\\extensions\\microsoft\\python\\core\\debugpy\\launcher/../..\\debugpy\\__main__.py\", line 71, in \u003cmodule\u003e\n    cli.main()\n  File \"c:\\program files\\microsoft visual studio\\2022\\community\\common7\\ide\\extensions\\microsoft\\python\\core\\debugpy\\launcher/../..\\debugpy/..\\debugpy\\server\\cli.py\", line 501, in main\n    run()\n  File \"c:\\program files\\microsoft visual studio\\2022\\community\\common7\\ide\\extensions\\microsoft\\python\\core\\debugpy\\launcher/../..\\debugpy/..\\debugpy\\server\\cli.py\", line 351, in run_file\n    runpy.run_path(target, run_name\u003d\"__main__\")\n  File \"c:\\program files\\microsoft visual studio\\2022\\community\\common7\\ide\\extensions\\microsoft\\python\\core\\debugpy\\_vendored\\pydevd\\_pydevd_bundle\\pydevd_runpy.py\", line 310, in run_path\n    return _run_module_code(code, init_globals, run_name, pkg_name\u003dpkg_name, script_name\u003dfname)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\program files\\microsoft visual studio\\2022\\community\\common7\\ide\\extensions\\microsoft\\python\\core\\debugpy\\_vendored\\pydevd\\_pydevd_bundle\\pydevd_runpy.py\", line 127, in _run_module_code\n    _run_code(code, mod_globals, init_globals, mod_name, mod_spec, pkg_name, script_name)\n  File \"c:\\program files\\microsoft visual studio\\2022\\community\\common7\\ide\\extensions\\microsoft\\python\\core\\debugpy\\_vendored\\pydevd\\_pydevd_bundle\\pydevd_runpy.py\", line 118, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Users\\user\\Documents\\repos\\hypotez\\SANDBOX\\davidka\\process_scenarios_for_train.py\", line 45, in \u003cmodule\u003e\n    @dataclass\n     ^^^^^^^^^\n  File \"c:\\python312\\Lib\\dataclasses.py\", line 1268, in dataclass\n    return wrap(cls)\n           ^^^^^^^^^\n  File \"c:\\python312\\Lib\\dataclasses.py\", line 1258, in wrap\n    return _process_class(cls, init, repr, eq, order, unsafe_hash,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\python312\\Lib\\dataclasses.py\", line 994, in _process_class\n    cls_fields.append(_get_field(cls, name, type, kw_only))\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\python312\\Lib\\dataclasses.py\", line 852, in _get_field\n    raise ValueError(f\u0027mutable default {type(f.default)} for field \u0027\nValueError: mutable default \u003cclass \u0027dict\u0027\u003e for field scenario_hb is not allowed: use default_factory\n",
      "role": "user",
      "tokenCount": 2462
    }, {
      "text": "Here\u0027s a thinking process to arrive at the explanation and solution for the Python `dataclass` error:\n\n1.  **Understand the Goal:** The user has provided Python code using `@dataclass` and a traceback. They want to know what the error is and how to fix it.\n\n2.  **Analyze the Code:**\n    *   It defines a class `Config` decorated with `@dataclass`.\n    *   Inside the class, there are several attributes defined: `scenario_hb`, `scenario_etzmaleh`, `scenario_amazon`, `scenario_aliexpress`, and `scenarios_list`.\n    *   `scenario_hb`, `scenario_etzmaleh`, `scenario_amazon`, and `scenario_aliexpress` are annotated as `dict` and assigned dictionary literals as default values.\n    *   `scenarios_list` is annotated as `list` and assigned a list literal `[scenario_hb,]` as a default value.\n\n3.  **Analyze the Traceback:**\n    *   The error occurs during the definition of the `Config` class, specifically when the `@dataclass` decorator is processed (`File \"C:\\Users\\user\\Documents\\repos\\hypotez\\SANDBOX\\davidka\\process_scenarios_for_train.py\", line 45, in \u003cmodule\u003e @dataclass`).\n    *   The core error message is: `ValueError: mutable default \u003cclass \u0027dict\u0027\u003e for field scenario_hb is not allowed: use default_factory`.\n    *   This message is very specific:\n        *   `mutable default`: It identifies the problem as using a mutable type (like `dict` or `list`) as a default value.\n        *   `\u003cclass \u0027dict\u0027\u003e`: It specifies that the mutable type is a dictionary.\n        *   `for field scenario_hb`: It points to the exact field causing the immediate error (`scenario_hb`).\n        *   `is not allowed`: Clearly states this is forbidden in standard dataclass usage.\n        *   `use default_factory`: It provides the recommended solution.\n\n4.  **Connect Code and Error:** The traceback explicitly mentions `scenario_hb` and `dict`. Looking at the code, `scenario_hb: dict \u003d {...}` directly assigns a dictionary literal as the default value for the `scenario_hb` field. This matches the error description perfectly.\n\n5.  **Understand the \"Why\": Why are mutable defaults problematic?**\n    *   Recall how default arguments work in Python functions. If a mutable object (like a list or dict) is used as a default, *the same object* is reused across all calls (or in the case of classes, across all instances created *without* specifying that argument).\n    *   Example:\n        ```python\n        def add_to_list(item, my_list\u003d[]):\n            my_list.append(item)\n            return my_list\n\n        print(add_to_list(1))  # Output: [1]\n        print(add_to_list(2))  # Output: [1, 2] (Unexpected!)\n        ```\n    *   Dataclasses aim to prevent this common pitfall by disallowing direct assignment of mutable defaults for instance variables. If allowed, all instances of `Config` created without specifying `scenario_hb` would *share the exact same dictionary*. Modifying `instance1.scenario_hb` would also change `instance2.scenario_hb`, which is almost never the desired behavior for instance attributes.\n\n6.  **Identify the Solution (`default_factory`):**\n    *   The error message suggests using `default_factory`.\n    *   `default_factory` is a parameter to the `dataclasses.field()` function.\n    *   It expects a *callable* (like a function or lambda) that takes no arguments and returns a *new* instance of the desired default value *each time* an instance of the dataclass is created without providing a value for that field.\n    *   For a dictionary default, the factory should return a new dictionary. `dict` itself is a callable that creates an empty dictionary, but here we need a specific *pre-filled* dictionary.\n    *   The simplest factory is a `lambda` function that returns the desired dictionary literal: `lambda: {\"supplier_prefix\": \"hb\", ...}`.\n\n7.  **Apply the Solution to the Code:**\n    *   Import `field` from `dataclasses`.\n    *   For *each* field that uses a mutable default (`dict` or `list`), replace the direct assignment with `field(default_factory\u003d...)`.\n    *   Apply this to `scenario_hb`, `scenario_etzmaleh`, `scenario_amazon`, `scenario_aliexpress`, and `scenarios_list`.\n    *   For `scenarios_list`, the default value `[scenario_hb,]` is problematic because `scenario_hb` refers to another class attribute *before* the class is fully defined and *before* instances exist. This default assignment doesn\u0027t make sense in the context of instance attributes needing unique defaults. The `scenarios_list` default *also* needs a `default_factory`. What should the factory return? It seems the intention might be for *instances* to potentially hold a list of scenarios. A sensible default is often an *empty* list: `field(default_factory\u003dlist)`. If the user *really* intends for *every* new instance to start with a copy of the `scenario_hb` dictionary *by default*, the factory would be `lambda: [ \u003ccopy of scenario_hb dict\u003e ]`. However, given the structure, it\u0027s more likely `scenarios_list` is meant to be populated *after* instance creation or that the user misunderstood how defaults work here. The simplest and most common fix is `default_factory\u003dlist`. *Self-correction:* The original code `[scenario_hb,]` refers to the *class* attribute `scenario_hb`. This is still problematic for mutable defaults. The safest default is an empty list. If the user *intends* for the default list to contain the *default* `scenario_hb` dictionary, the factory needs to create *both* the list *and* the dictionary inside it newly each time. E.g., `lambda: [ {\"supplier_prefix\":\"hb\", ...} ]`.\n\n8.  **Refine the Explanation:**\n    *   Clearly state the error: Using mutable types (like `dict`, `list`) directly as default values in dataclasses is forbidden.\n    *   Explain *why*: This prevents unintended sharing of the *same* mutable object across different instances of the class.\n    *   Introduce the solution: Use `dataclasses.field(default_factory\u003d...)`.\n    *   Explain `default_factory`: It takes a function (often a `lambda`) that returns a *new* instance of the default value each time it\u0027s needed.\n    *   Provide the corrected code, applying `field(default_factory\u003d...)` to all affected attributes (`scenario_hb`, `scenario_etzmaleh`, `scenario_amazon`, `scenario_aliexpress`, `scenarios_list`). Use lambda functions returning the dictionary literals for the dict fields, and `list` (or `lambda: []`) for the list field.\n    *   Add necessary import: `from dataclasses import dataclass, field`.\n    *   Address the `scenarios_list` specifically: Explain that `list` is also mutable and needs `default_factory`. Recommend `default_factory\u003dlist` as the most common and safest default (an empty list). If they *really* want the default `scenario_hb` dict inside the list by default, show the more complex lambda: `lambda: [ {\"supplier_prefix\":\"hb\", ...} ]`. *Self-correction:* Given the original code `[scenario_hb,]`, it\u0027s likely they wanted the *default content* of `scenario_hb` in the list. So the more complex lambda is the direct translation of the *intent* behind the flawed original code. Let\u0027s present that as the primary fix for `scenarios_list` while mentioning the empty list alternative.\n\n9.  **Final Review:** Check the explanation for clarity, accuracy, and completeness. Ensure the code example is correct and directly addresses the user\u0027s problem. Make sure the \"why\" is explained simply.",
      "role": "model",
      "tokenCount": 1808,
      "isThought": true
    }, {
      "text": "Ошибка заключается в том, как вы определяете значения по умолчанию для полей типа `dict` и `list` в вашем `dataclass`.\n\n**Суть проблемы:**\n\nТипы `dict` (словарь) и `list` (список) в Python являются **изменяемыми (mutable)**. Когда вы присваиваете изменяемый объект (например, `{...}` или `[...]`) напрямую как значение по умолчанию для атрибута класса (или dataclass), **все экземпляры** этого класса будут **разделять один и тот же** объект по умолчанию.\n\nЕсли вы измените этот словарь или список в одном экземпляре, он изменится и во всех других экземплярах, что почти всегда является нежелательным поведением и источником ошибок.\n\n`dataclasses` специально запрещает это, чтобы предотвратить такие ошибки, и выдает `ValueError`, который вы видите:\n\n```\nValueError: mutable default \u003cclass \u0027dict\u0027\u003e for field scenario_hb is not allowed: use default_factory\n```\n\n**Решение:**\n\nКак подсказывает сообщение об ошибке, вам нужно использовать `dataclasses.field` с параметром `default_factory`. `default_factory` принимает функцию (часто лямбда-функцию), которая будет вызываться **каждый раз** при создании нового экземпляра класса *без* явного указания значения для этого поля. Эта функция должна возвращать *новый* экземпляр вашего значения по умолчанию (новый словарь или новый список).\n\n**Исправленный код:**\n\n```python\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Any # Добавлено для лучшей типизации (опционально)\n\n@dataclass\nclass Config:\n\n    # Используем field и default_factory для словарей\n    scenario_hb: Dict[str, Any] \u003d field(default_factory\u003dlambda: {\n        \"supplier_prefix\": \"hb\",\n        \"url\": \"https://hbdeadsea.co.il/product-category/aromatherapy/diffusers/\",\n        \"train_product_url\": \"https://hbdeadsea.co.il/product/%d7%a7%d7%a8%d7%9d-%d7%a8%d7%92%d7%9c%d7%99%d7%99%d7%9d-%d7%90%d7%99%d7%a0%d7%98%d7%a0%d7%a1%d7%99%d7%91%d7%99-%d7%9e%d7%95%d7%a2%d7%a9%d7%a8-%d7%91%d7%91%d7%95%d7%a5-%d7%9e%d7%99%d7%9d-%d7%94%d7%9e-2/\",\n        \"name\": \"מפיצי ריח ומילוי\",\n        \"condition\": \"new\",\n        \"presta_categories\": {\n            \"default_category\": 11246,\n            \"additional_categories\": []\n        }\n    })\n\n    scenario_etzmaleh: Dict[str, Any] \u003d field(default_factory\u003dlambda: {\n        \"supplier_prefix\": \"etzmaleh\",\n        \"url\": \"https://www.etzmaleh.co.il/montessori_collection\",\n        \"train_product_url\": \"https://www.etzmaleh.co.il/montessori_transition_bed\",\n        \"name\": \"הקולקציה המונטסורית\",\n        \"condition\": \"new\",\n        \"presta_categories\": {\n            \"default_category\": 11390,\n            \"additional_categories\": [11389]\n        }\n    })\n\n    scenario_amazon: Dict[str, Any] \u003d field(default_factory\u003dlambda: {\n        \"supplier_prefix\": \"amazon\",\n        \"url\": \"https://amzn.to/3OhRz2g\",\n        \"train_product_url\": \"https://www.amazon.com/C%C3%A1-dOro-Hippie-Colored-Murano-Style/dp/B09N53XSQB/ref\u003dsr_1_2_sspa?crid\u003d24Q0ZZYVNOQMP\u0026dib\u003deyJ2IjoiMSJ9.WhN_5Deyh2Yz9gRyrG1anDCr1UB8tnpHH_pJePpURaaciFWg_5Ft0XuS-e3A67g3rO1RECMmgpmRLEJOI7Zj6JyAd9DJh6dLSwUcHgHnJiKhmBmpa-AlDotmiq0-4Q_b90WkEmSsgIzC4L1Yc_KssvHa7bj6LGl6fMM4VuctS4nDQ3vYigYzB3jzP9Q3nT5BRv5_yRigaF-hDpPc0lL5wvo5gQ4i-9Jcy4vHyHNX04ZpoQBXrwcwLo3XWoruWSmnrgvQ5XxRzLntClGxBSN3cTjsunsHYzzKSp_VYx631JM.U1bRX0eDJ5c13nETwkLbN9BPt6-OtTKUvvRQiGodOd0\u0026dib_tag\u003dse\u0026keywords\u003dArt+Deco+murano+glass\u0026linkCode\u003dsl2\u0026linkId\u003d1a5da5b6a02f09a4d8fe47362e06cf3a\u0026qid\u003d1745171225\u0026sprefix\u003dart+deco+murano+glass%2Caps%2C230\u0026sr\u003d8-2-spons\u0026sp_csd\u003dd2lkZ2V0TmFtZT1zcF9hdGY\u0026psc\u003d1\",\n        \"condition\": \"new\",\n        \"presta_categories\": {\n            \"default_category\": 11209,\n            \"additional_categories\": [11206, 11388]\n        }\n    })\n\n    scenario_aliexpress: Dict[str, Any] \u003d field(default_factory\u003dlambda: {\n        \"supplier_prefix\": \"aliexpress\",\n        \"url\": \"https://www.aliexpress.com\",\n        \"train_product_url\": \"https://www.aliexpress.com/item/1005008108060545.html?spm\u003da2g0o.tm1000020483.d1.1.28f9474cPkErMV\u0026sourceType\u003d561\u0026pvid\u003d1a630f56-af44-4a5e-8fa6-ba39f7382734\u0026pdp_ext_f\u003d%7B%22ship_from%22:%22CN%22,%22sku_id%22:%2212000043799911402%22%7D\u0026scm\u003d1007.28480.422277.0\u0026scm-url\u003d1007.28480.422277.0\u0026scm_id\u003d1007.28480.422277.0\u0026pdp_npi\u003d4%40dis%21ILS%21%E2%82%AA%20119.48%21%E2%82%AA%2058.54%21%21%21231.15%21113.26%21%402141131717451712898942519ec7de%2112000043799911402%21gsd%21IL%213690978535%21\u0026channel\u003dsd\u0026aecmd\u003dtrue\",\n        \"condition\": \"new\",\n        \"presta_categories\": {\n            \"default_category\": 4292,\n            \"additional_categories\": []\n        }\n    })\n\n    # Используем field и default_factory для списка\n    # Эта лямбда-функция создает новый список, содержащий НОВЫЙ словарь scenario_hb\n    scenarios_list: List[Dict[str, Any]] \u003d field(default_factory\u003dlambda: [\n        { # Создаем копию словаря scenario_hb здесь\n            \"supplier_prefix\": \"hb\",\n            \"url\": \"https://hbdeadsea.co.il/product-category/aromatherapy/diffusers/\",\n            \"train_product_url\": \"https://hbdeadsea.co.il/product/%d7%a7%d7%a8%d7%9d-%d7%a8%d7%92%d7%9c%d7%99%d7%99%d7%9d-%d7%90%d7%99%d7%a0%d7%98%d7%a0%d7%a1%d7%99%d7%91%d7%99-%d7%9e%d7%95%d7%a2%d7%a9%d7%a8-%d7%91%d7%91%d7%95%d7%a5-%d7%9e%d7%99%d7%9d-%d7%94%d7%9e-2/\",\n            \"name\": \"מפיצי ריח ומילוי\",\n            \"condition\": \"new\",\n            \"presta_categories\": {\n                \"default_category\": 11246,\n                \"additional_categories\": []\n            }\n        }\n    ])\n\n    # Если нужен просто пустой список по умолчанию (более частый случай):\n    # scenarios_list: List[Dict[str, Any]] \u003d field(default_factory\u003dlist)\n\n# Пример использования\nconfig_instance1 \u003d Config()\nconfig_instance2 \u003d Config()\n\n# Убедимся, что словари разные\nprint(id(config_instance1.scenario_hb))\nprint(id(config_instance2.scenario_hb))\nprint(id(config_instance1.scenario_hb) !\u003d id(config_instance2.scenario_hb)) # Выведет True\n\n# Убедимся, что списки и их содержимое разные\nprint(id(config_instance1.scenarios_list))\nprint(id(config_instance2.scenarios_list))\nprint(id(config_instance1.scenarios_list) !\u003d id(config_instance2.scenarios_list)) # Выведет True\nif config_instance1.scenarios_list and config_instance2.scenarios_list:\n     print(id(config_instance1.scenarios_list[0]))\n     print(id(config_instance2.scenarios_list[0]))\n     print(id(config_instance1.scenarios_list[0]) !\u003d id(config_instance2.scenarios_list[0])) # Выведет True\n\n```\n\n**Ключевые изменения:**\n\n1.  **Импорт `field`:** Добавлена строка `from dataclasses import dataclass, field`.\n2.  **Использование `field(default_factory\u003d...)`:** Для каждого атрибута, который имел словарь (`dict`) или список (`list`) в качестве значения по умолчанию, прямое присваивание заменено на `field(default_factory\u003dlambda: {...})` для словарей и `field(default_factory\u003dlambda: [...])` для списка.\n3.  **`scenarios_list`:** Изначально вы пытались использовать значение другого атрибута (`scenario_hb`) в значении по умолчанию для `scenarios_list`. Это тоже проблематично. В исправленном коде лямбда-функция для `scenarios_list` создает *новый* список, содержащий *копию* данных, которые были в `scenario_hb`. Если же вам нужен просто *пустой* список по умолчанию, используйте `field(default_factory\u003dlist)`.\n4.  **Типизация (опционально):** Добавлен импорт `Dict`, `List`, `Any` из `typing` и использованы аннотации типов (`Dict[str, Any]`, `List[Dict[str, Any]]`) для лучшей читаемости и проверки типов.\n\nТеперь каждый раз, когда вы будете создавать экземпляр `Config`, для полей `scenario_hb`, `scenario_etzmaleh` и т.д., а также `scenarios_list`, будут создаваться *новые, независимые* словари и списки, что предотвратит нежелательные побочные эффекты.",
      "role": "model",
      "finishReason": "STOP",
      "tokenCount": 3000
    }],
    "pendingInputs": [{
      "text": "",
      "role": "user"
    }]
  }
}